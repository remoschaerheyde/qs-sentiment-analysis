{"version":3,"file":"halyard-enigma-mixin.min.js","sources":["../src/enigma-mixin/halyard-enigma-mixin.js","../src/enigma-mixin/utils.js"],"sourcesContent":["import convertQixGetLocalInfo from './utils';\r\n\r\nconst CONNECTION_ERROR = 'Connection Error';\r\nconst LOADING_ERROR = 'Loading Error';\r\nconst SYNTAX_ERROR = 'Syntax Error';\r\n/**\r\n * Create error message\r\n * @private\r\n * @param {string} errorType\r\n * @param {object} qixError\r\n * @param {(Table|HyperCube)} item\r\n * @returns {{type: string, message: string, item: object, qixError: string}}\r\n */\r\nfunction createErrorMessage(errorType, qixError, item) {\r\n  return {\r\n    type: errorType,\r\n    message: qixError.message || qixError.qErrorString,\r\n    item,\r\n    qixError,\r\n  };\r\n}\r\n\r\nconst halyardMixin = {\r\n  types: 'Global',\r\n  init(args) {\r\n    if (args.config) {\r\n      args.api.Promise = args.config.Promise;\r\n    } else {\r\n      args.api.Promise = args.Promise;\r\n    }\r\n  },\r\n  extend: {\r\n    /**\r\n     * Creates a session app based on the model in the halyard instance\r\n     * @public\r\n     * @param {Halyard} halyard - A halyard instance\r\n     * @returns {Promise.<TResult>}\r\n     */\r\n    createSessionAppUsingHalyard(halyard) {\r\n      const that = this;\r\n      return that.createSessionApp().then(app => that.setScriptAndReloadWithHalyard(app, halyard, false));\r\n    },\r\n\r\n    /**\r\n     * Creates an app with the model in the halyard instance.\r\n     * @public\r\n     * @param {string} appName\r\n     * @param {Halyard} halyard\r\n     * @returns {Promise.<TResult>}\r\n     */\r\n    createAppUsingHalyard(appName, halyard) {\r\n      const that = this;\r\n      return that.createApp(appName).then((app) => {\r\n        const appId = app.qAppId;\r\n        return that.openDoc(appId).then(result => that.setScriptAndReloadWithHalyard(result, halyard, true));\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Reloads an existing app with the model in the halyard instance. Can also create an app is createIfMissing is set to true.\r\n     * @public\r\n     * @param {string} existingAppName\r\n     * @param {Halyard} halyard\r\n     * @param {boolean} createIfMissing\r\n     * @returns {Promise.<TResult>}\r\n     */\r\n    reloadAppUsingHalyard(existingAppName, halyard, createIfMissing) {\r\n      const that = this;\r\n      return that.openDoc(existingAppName)\r\n        .catch((error) => {\r\n          const COULD_NOT_FIND_APP = 1003;\r\n\r\n          if (createIfMissing && error.code === COULD_NOT_FIND_APP) {\r\n            return that.createApp(existingAppName).then(app => that.openDoc(app.qAppId));\r\n          }\r\n          return that.Promise.reject(error);\r\n        })\r\n        .then(result => that.setScriptAndReloadWithHalyard(result, halyard, true));\r\n    },\r\n\r\n    /**\r\n     * Use the model in halyard to set the script of an app and save it\r\n     * @public\r\n     * @param {Qix.app} app\r\n     * @param {Halyard} halyard\r\n     * @param {boolean} doSaveAfterReload\r\n     * @returns {Promise.<TResult>}\r\n     */\r\n    setScriptAndReloadWithHalyard(app, halyard, doSaveAfterReload) {\r\n      const that = this;\r\n      const deferredConnections = [];\r\n\r\n      halyard.getConnections().forEach((connection) => {\r\n        const qixConnectionObject = connection.getQixConnectionObject();\r\n        if (qixConnectionObject) {\r\n          const connectionPromise = app.createConnection(qixConnectionObject)\r\n            .then(result => result, (err) => {\r\n              const LOCERR_CONNECTION_ALREADY_EXISTS = 2000;\r\n\r\n              // Will not throw error if connection already exists.\r\n              // The connections guid makes the connections unique and we assumes that it\r\n              // is the same that was previously created\r\n              if (!(err.code && err.code === LOCERR_CONNECTION_ALREADY_EXISTS)) {\r\n                throw createErrorMessage(CONNECTION_ERROR, err, connection);\r\n              }\r\n            });\r\n\r\n          deferredConnections.push(connectionPromise);\r\n        }\r\n      });\r\n\r\n      return that.Promise.all(deferredConnections).then(() => app.getLocaleInfo().then((localeInfoResult) => {\r\n        halyard.setDefaultSetStatements(convertQixGetLocalInfo(localeInfoResult), true);\r\n        return app.globalApi.configureReload(true, true, false).then(() => app.setScript(halyard.getScript())\r\n          .then(() => app.doReload().then(() => app.globalApi.getProgress(0).then((progressResult) => {\r\n            if (progressResult.qErrorData.length !== 0) {\r\n              return app.checkScriptSyntax().then((syntaxCheckData) => {\r\n                if (syntaxCheckData.length === 0) {\r\n                  throw createErrorMessage(LOADING_ERROR, progressResult.qErrorData[0]);\r\n                } else {\r\n                  const item = halyard.getItemThatGeneratedScriptAt(syntaxCheckData[0].qTextPos);\r\n                  throw createErrorMessage(SYNTAX_ERROR, progressResult.qErrorData[0], item);\r\n                }\r\n              });\r\n            }\r\n\r\n            if (doSaveAfterReload) {\r\n              return app.doSave().then(() => app);\r\n            }\r\n\r\n            return app;\r\n          }))));\r\n      }));\r\n    },\r\n  },\r\n};\r\n\r\n\r\nconst exposeGlobalApi = {\r\n  types: 'Doc',\r\n  init(args) {\r\n    const getObjectArgs = {\r\n      handle: -1,\r\n      id: 'Global',\r\n      type: 'Global',\r\n    };\r\n    if (args.config) {\r\n      getObjectArgs.genericType = 'Global';\r\n    } else {\r\n      getObjectArgs.customType = 'Global';\r\n      getObjectArgs.delta = true;\r\n    }\r\n    args.api.globalApi = args.api.session.getObjectApi(getObjectArgs);\r\n  },\r\n};\r\n\r\nmodule.exports = [halyardMixin, exposeGlobalApi];\r\n","/**\r\n * @public\r\n * @param {{qThousandSep: string, qDecimalSep: string qMoneyThousandSep: string, qMoneyDecimalSep: string, qMoneyFmt: string,\r\n * qTimeFmt: string, qDateFmt: string, qTimestampFmt: string, qFirstWeekDay: string, qReferenceDay: string,\r\n * qFirstMonthOfYear: string, qCollation: string, qMonthNames: string,\r\n * qLongMonthNames: string, qDayNames: string, qLongDayNames: string }} localInfoData\r\n * @returns {{ThousandSep: string, DecimalSep: string, MoneyThousandSep: string, MoneyDecimalSep: string,\r\n * MoneyFormat: string, TimeFormat: string, DateFormat: string, TimestampFormat: string, FirstWeekDay: string,\r\n * ReferenceDay: string, FirstMonthOfYear: string, CollationLocale: string, MonthNames: string, LongMonthNames: string,\r\n * DayNames: string, LongDayNames: string}}\r\n */\r\nexport default function convertQixGetLocalInfo(localInfoData) {\r\n  return {\r\n    ThousandSep: localInfoData.qThousandSep,\r\n    DecimalSep: localInfoData.qDecimalSep,\r\n    MoneyThousandSep: localInfoData.qMoneyThousandSep,\r\n    MoneyDecimalSep: localInfoData.qMoneyDecimalSep,\r\n    MoneyFormat: localInfoData.qMoneyFmt,\r\n    TimeFormat: localInfoData.qTimeFmt,\r\n    DateFormat: localInfoData.qDateFmt,\r\n    TimestampFormat: localInfoData.qTimestampFmt,\r\n    FirstWeekDay: localInfoData.qFirstWeekDay,\r\n    ReferenceDay: localInfoData.qReferenceDay,\r\n    FirstMonthOfYear: localInfoData.qFirstMonthOfYear,\r\n    CollationLocale: localInfoData.qCollation,\r\n    MonthNames: localInfoData.qCalendarStrings.qMonthNames,\r\n    LongMonthNames: localInfoData.qCalendarStrings.qLongMonthNames,\r\n    DayNames: localInfoData.qCalendarStrings.qDayNames,\r\n    LongDayNames: localInfoData.qCalendarStrings.qLongDayNames,\r\n  };\r\n}\r\n"],"names":["createErrorMessage","errorType","qixError","item","type","message","qErrorString","halyardMixin","types","[object Object]","args","config","api","Promise","extend","halyard","that","this","createSessionApp","then","app","setScriptAndReloadWithHalyard","appName","createApp","appId","qAppId","openDoc","result","existingAppName","createIfMissing","catch","error","code","reject","doSaveAfterReload","deferredConnections","getConnections","forEach","connection","qixConnectionObject","getQixConnectionObject","connectionPromise","createConnection","err","push","all","getLocaleInfo","localeInfoResult","setDefaultSetStatements","ThousandSep","localInfoData","qThousandSep","DecimalSep","qDecimalSep","MoneyThousandSep","qMoneyThousandSep","MoneyDecimalSep","qMoneyDecimalSep","MoneyFormat","qMoneyFmt","TimeFormat","qTimeFmt","DateFormat","qDateFmt","TimestampFormat","qTimestampFmt","FirstWeekDay","qFirstWeekDay","ReferenceDay","qReferenceDay","FirstMonthOfYear","qFirstMonthOfYear","CollationLocale","qCollation","MonthNames","qCalendarStrings","qMonthNames","LongMonthNames","qLongMonthNames","DayNames","qDayNames","LongDayNames","qLongDayNames","globalApi","configureReload","setScript","getScript","doReload","getProgress","progressResult","qErrorData","length","checkScriptSyntax","syntaxCheckData","getItemThatGeneratedScriptAt","qTextPos","doSave","exposeGlobalApi","getObjectArgs","handle","id","genericType","customType","delta","session","getObjectApi","module","exports"],"mappings":"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"}