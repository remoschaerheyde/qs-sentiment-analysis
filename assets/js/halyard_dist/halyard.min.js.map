{"version":3,"file":"halyard.min.js","sources":["../src/utils/utils.js","../src/connections/connection-base.js","../src/connections.js","../src/connections/file.js","../src/connections/web-file.js","../src/connections/inline-data.js","../src/utils/json-to-csv.js","../src/default-connection-matcher.js","../src/connection-matcher.js","../src/utils/format-specification.js","../src/table.js","../src/utils/hyper-cube-specification.js","../src/utils/hyper-cube-utils.js","../src/hyper-cube.js","../src/set-statement.js","../src/derived-fields-template.js","../src/calendar-derived-fields.js","../src/halyard.js"],"sourcesContent":["/**\r\n * Get folder path from file path\r\n * @private\r\n * @param {string} path\r\n * @returns {string}\r\n */\r\nexport function folderPath(path) {\r\n  let folderPathMatch = path.match(/^(.*)(\\\\.*\\..*$|\\\\.*)$/);\r\n\r\n  if (folderPathMatch) {\r\n    return folderPathMatch[1];\r\n  }\r\n\r\n  // Unix file path check\r\n  folderPathMatch = path.match(/^(.*)(\\/.*\\..*$|\\/.*)$/);\r\n\r\n  return folderPathMatch && folderPathMatch[1];\r\n}\r\n\r\n/**\r\n * Get file name from file path\r\n * @private\r\n * @param {string} path\r\n * @returns {string}\r\n */\r\nexport function fileName(path) {\r\n  let fileNameMatch = path.match(/^.*\\\\(.*\\..*|.*)$/);\r\n\r\n  if (fileNameMatch) {\r\n    return fileNameMatch[1];\r\n  }\r\n\r\n  fileNameMatch = path.match(/^.*\\/(.*\\..*|.*)$/);\r\n\r\n  return fileNameMatch && fileNameMatch[1];\r\n}\r\n\r\n/**\r\n * Get file extension from file path\r\n * @private\r\n * @param {string} path\r\n * @returns {string}\r\n */\r\nexport function fileExtension(path) {\r\n  const fileExtensionMatch = path.match(/^.*\\.(.*)$/);\r\n\r\n  return fileExtensionMatch && fileExtensionMatch[1];\r\n}\r\n\r\n/**\r\n * Escape text with double quotes\r\n * @private\r\n * @param {string} text\r\n * @returns {string}\r\n */\r\nexport function escapeText(text) {\r\n  return text.replace(/\"/g, '\"\"');\r\n}\r\n\r\n/**\r\n * Get a unique name\r\n * @private\r\n * @returns {string}\r\n */\r\nexport function uniqueName() {\r\n  /* eslint no-bitwise: [\"off\"] */\r\n  /* eslint no-mixed-operators: [\"off\"] */\r\n\r\n  return 'xxxxx-8xxxx-yxxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n    const r = (Math.random() * 16) | 0;\r\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\n/**\r\n * Validate the field type\r\n * @private\r\n * @param {string} type\r\n * @returns {boolean}\r\n */\r\nexport function validFieldType(type) {\r\n  const validFieldTypes = ['time', 'timestamp', 'date', 'interval'];\r\n\r\n  type = type || '';\r\n\r\n  return validFieldTypes.indexOf(type.toLowerCase()) > -1;\r\n}\r\n\r\n/**\r\n * Get indentation characters\r\n * @private\r\n * @returns {string}\r\n */\r\nexport function indentation() {\r\n  return '  ';\r\n}\r\n\r\n/**\r\n * Get the field name\r\n * @private\r\n * @param {Field} field\r\n * @returns {string}\r\n */\r\nexport function getFieldName(field) {\r\n  return field.name || field.src;\r\n}\r\n","import { uniqueName } from '../utils/utils';\r\n\r\n/**\r\n * A base set of methods used by Connections\r\n * @typedef {object} Connection\r\n * @property {string} path - The Path to a resource\r\n * @property {string} connectionType - The type can be either 'folder' or 'internet'\r\n */\r\n\r\nclass ConnectionBase {\r\n  /**\r\n   * A base set of methods used by Connections\r\n   * @public\r\n   * @param {string} path - The Path to a resource\r\n   * @param {string} connectionType - The type can be either 'folder' or 'internet'\r\n   * @class\r\n   */\r\n  constructor(path, connectionType) {\r\n    this.path = path;\r\n    this.connectionType = connectionType;\r\n    this.fileExtension = '';\r\n  }\r\n\r\n  /**\r\n   * Returns specified file extension.\r\n   * @public\r\n   * @returns {string}\r\n   */\r\n  getFileExtension() {\r\n    return this.fileExtension;\r\n  }\r\n\r\n  /**\r\n   * Get specified connection type.\r\n   * @public\r\n   * @returns {string}\r\n   */\r\n  getConnectionType() {\r\n    return this.connectionType;\r\n  }\r\n\r\n  /**\r\n   * Get the QIX representation of a connection.\r\n   * @public\r\n   * @returns {{qName: (string), qConnectionString: (string), qType: (string)}}\r\n   */\r\n  getQixConnectionObject() {\r\n    return {\r\n      qName: this.getName(),\r\n      qConnectionString: this.path,\r\n      qType: this.getConnectionType(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get the name and if nothing is set then it will receive a unique name\r\n   * @public\r\n   * @returns {string}\r\n   */\r\n  getName() {\r\n    if (!this.name) {\r\n      this.name = uniqueName();\r\n    }\r\n\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Get the lib statement used in the load script to connect to a connection\r\n   * @public\r\n   * @returns {string}\r\n   */\r\n  getLibStatement() {\r\n    return `lib://${this.getName()}`;\r\n  }\r\n\r\n  /**\r\n   * Get the load script for this connection\r\n   * @public\r\n   * @returns {string}\r\n   */\r\n  getScript() {\r\n    return `FROM [${this.getLibStatement()}]`;\r\n  }\r\n}\r\n\r\nexport default ConnectionBase;\r\n","import FileConnection from './connections/file';\r\nimport WebConnection from './connections/web-file';\r\nimport InlineData from './connections/inline-data';\r\n\r\n/**\r\n * Default set of Connections that are available\r\n * @constant\r\n * @type {object}\r\n */\r\nexport default {\r\n  File: FileConnection,\r\n  Web: WebConnection,\r\n  Inline: InlineData,\r\n};\r\n","import ConnectionBase from './connection-base';\r\nimport * as Utils from '../utils/utils';\r\n\r\nclass FileConnection extends ConnectionBase {\r\n  /**\r\n   * File Connection representation. It will create a folder connection in QIX.\r\n   * @public\r\n   * @param {string} path - Absolute file path\r\n   * @constructor\r\n   */\r\n  constructor(path) {\r\n    super(Utils.folderPath(path), 'folder');\r\n\r\n    this.fileName = Utils.fileName(path);\r\n\r\n    this.fileExtension = Utils.fileExtension(path) || 'txt';\r\n  }\r\n\r\n  /**\r\n   * Get the lib statement for the specified file path\r\n   * @public\r\n   * @returns {string}\r\n   */\r\n  getLibStatement() {\r\n    return `${super.getLibStatement()}/${this.fileName}`;\r\n  }\r\n}\r\n\r\nexport default FileConnection;\r\n","import ConnectionBase from './connection-base';\r\n\r\nclass WebFileConnection extends ConnectionBase {\r\n  /**\r\n   * Web file connector structure. It will setup everything to create a QIX internet connection.\r\n   * @public\r\n   * @param {string} url\r\n   * @param {string} fileExtension\r\n   */\r\n  constructor(url, fileExtension) {\r\n    super(url, 'internet');\r\n\r\n    const fileExtensionMatch = url.match(/^https?:\\/\\/.*\\/.*\\.(\\w*)\\?.*$/)\r\n      || url.match(/^https?:\\/\\/.*\\/.*\\.(\\w*)$/);\r\n\r\n    this.fileExtension = fileExtension || (fileExtensionMatch && fileExtensionMatch[1]) || 'html';\r\n  }\r\n}\r\nexport default WebFileConnection;\r\n","import ConnectionBase from './connection-base';\r\nimport * as Utils from '../utils/utils';\r\n\r\nclass InlineData extends ConnectionBase {\r\n  /**\r\n   * Inline data representation. This is typically CSV formatted data.\r\n   * @public\r\n   * @param {string} data\r\n   * @constructor\r\n   */\r\n  constructor(data) {\r\n    super();\r\n\r\n    this.data = data;\r\n\r\n    this.fileExtension = 'txt';\r\n  }\r\n\r\n  /**\r\n   * Get the load script representation\r\n   * @public\r\n   * @returns {string}\r\n   */\r\n  getScript() {\r\n    return `INLINE \"\\n${Utils.escapeText(this.data)}\\n\"`;\r\n  }\r\n\r\n  /**\r\n   * Get lib statement but there are none for inline data\r\n   * @private\r\n   */\r\n  getLibStatement() {\r\n  }\r\n\r\n  /**\r\n   * Get the QAE connection object but there are none for inline data\r\n   * @private\r\n   */\r\n  getQixConnectionObject() {\r\n  }\r\n}\r\n\r\nexport default InlineData;\r\n","/**\r\n * Escape values containing delimiter\r\n * @private\r\n * @param {string} data\r\n * @param {string} delimiter\r\n * @returns {string}\r\n */\r\nfunction escapeValueContainingDelimiter(data, delimiter) {\r\n  if (data && typeof data === 'string' && (data.indexOf(delimiter) > -1 || data.indexOf('\\n') > -1)) {\r\n    return `\"${data.replace(/\"/g, '\"\"').replace(/\\n/g, ' ')}\"`;\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * Convert array date to a string in a csv format\r\n * @private\r\n * @param {array} data\r\n * @returns {string}\r\n */\r\nexport function convert(data) {\r\n  if (data instanceof Array === false) {\r\n    data = [data];\r\n  }\r\n\r\n  let csv = '';\r\n  const delimiter = ',';\r\n\r\n  const headers = Object.keys(data[0]);\r\n\r\n  csv = `${csv + headers.map(header => escapeValueContainingDelimiter(header, delimiter))\r\n    .join(delimiter)}\\n`;\r\n\r\n  let fields = [];\r\n\r\n  for (let i = 0; i < data.length; i += 1) {\r\n    fields = [];\r\n\r\n    for (let j = 0; j < headers.length; j += 1) {\r\n      fields.push(escapeValueContainingDelimiter(data[i][headers[j]], delimiter));\r\n    }\r\n\r\n    csv = `${csv + fields.join(delimiter)}\\n`;\r\n  }\r\n\r\n  csv = csv.slice(0, -('\\n'.length));\r\n\r\n  return csv;\r\n}\r\n\r\n/**\r\n * Validate that the data is an JSON array\r\n * @private\r\n * @param {array} data\r\n * @returns {boolean}\r\n */\r\nexport function isJson(data) {\r\n  if (data instanceof Array) {\r\n    if (data[0] && typeof data[0] === 'object') {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n","import Connections from './connections';\r\nimport * as JsonToCsv from './utils/json-to-csv';\r\nimport ConnectionMatcher from './connection-matcher';\r\n\r\nconst connectionMatcher = new ConnectionMatcher();\r\n\r\n// url to a table file\r\nconnectionMatcher.addConnection(data => typeof data === 'string' && data.match(/^https?:\\/\\/(.*)$/g), data => new Connections.Web(data));\r\n\r\n// Path to a table file\r\nconnectionMatcher.addConnection(data => typeof data === 'string' && data.match(/^.*\\.(.*)$/g), data => new Connections.File(data));\r\n\r\n// Inline JSON table to csv\r\nconnectionMatcher.addConnection(\r\n  data => data instanceof Array && JsonToCsv.isJson(data),\r\n  data => new Connections.Inline(JsonToCsv.convert(data)),\r\n);\r\n\r\n// Inline csv table\r\nconnectionMatcher.addConnection(data => typeof data === 'string', data => new Connections.Inline(data));\r\n\r\nexport default connectionMatcher;\r\n","class ConnectionLookup {\r\n  /**\r\n   * Utility to add a matching function and a connection type to make it easier to implicitly choose a connection\r\n   * @private\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    this.connectionsRegistry = [];\r\n  }\r\n\r\n  /**\r\n   * Connection matching callback to identify which connection to use for an implicitly declared source.\r\n   * @callback connectionMatchingCallback\r\n   * @param {string} data - Url, file path, csv data\r\n   * @returns {Connection}\r\n   */\r\n\r\n  /**\r\n   * Add a matching function with a connection instance\r\n   * @private\r\n   * @param {connectionMatchingCallback} matchingFn - Matching function to decide what connection function to invoke\r\n   * @param {Connection} connection - Callback that returns a Connection instance\r\n   */\r\n  addConnection(matchingFn, connection) {\r\n    this.connectionsRegistry.push({\r\n      matchingFn,\r\n      connection,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Find a match for connection based on the input data\r\n   * @private\r\n   * @param {string} data - The data can be an Url, a file path or a csv data blob\r\n   * @returns {object}\r\n   */\r\n  findMatch(data) {\r\n    for (let i = 0; i < this.connectionsRegistry.length; i += 1) {\r\n      if (this.connectionsRegistry[i].matchingFn(data)) {\r\n        return this.connectionsRegistry[i].connection(data);\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n\r\nexport default ConnectionLookup;\r\n","import { escapeText } from './utils';\r\n\r\n/**\r\n * Validates supported character sets\r\n * @private\r\n * @param {string} characterSet\r\n * @returns {boolean|string}\r\n */\r\nfunction supportedCharacterSet(characterSet) {\r\n  const validCharacterSets = ['utf8', 'unicode', 'ansi', 'oem', 'mac'];\r\n\r\n  return (validCharacterSets.indexOf(characterSet) > -1 && characterSet)\r\n    || (Number(characterSet).toString() !== 'NaN' && `codepage is ${characterSet}`);\r\n}\r\n\r\n/**\r\n * Get the QIX specific format of a file\r\n * @private\r\n * @param {{ fileExtension: string, headerRowNr: number, delimiter: string, characterSet: string, srcTable: string, noLabels: boolean }} options\r\n * @returns {string}\r\n */\r\nexport default function formatSpecification(options) {\r\n  if (!options) {\r\n    options = {};\r\n  }\r\n\r\n  const formatSpecificationArr = [];\r\n\r\n  if (options.fileExtension) {\r\n    let fileFormat = options.fileExtension;\r\n\r\n    if (fileFormat === 'xlsx') {\r\n      fileFormat = 'ooxml';\r\n    }\r\n\r\n    if (fileFormat === 'csv') {\r\n      fileFormat = 'txt';\r\n    }\r\n\r\n    if (fileFormat === 'htm') {\r\n      fileFormat = 'html';\r\n    }\r\n\r\n    formatSpecificationArr.push(fileFormat);\r\n  }\r\n\r\n  if (options.headerRowNr || options.headerRowNr === 0) {\r\n    formatSpecificationArr.push(`header is ${options.headerRowNr} lines`);\r\n    // Should be included if header row is specified!\r\n    formatSpecificationArr.push('embedded labels');\r\n  }\r\n\r\n  if (options.delimiter) {\r\n    formatSpecificationArr.push(`delimiter is '${options.delimiter}'`);\r\n  }\r\n\r\n  if (options.characterSet && supportedCharacterSet(options.characterSet)) {\r\n    formatSpecificationArr.push(supportedCharacterSet(options.characterSet));\r\n  }\r\n\r\n  if (options.srcTable) {\r\n    formatSpecificationArr.push(`table is \"${escapeText(options.srcTable)}\"`);\r\n  }\r\n\r\n  if (options.noLabels) {\r\n    formatSpecificationArr.push('no labels');\r\n  }\r\n\r\n  let formatSpecificationString = '';\r\n\r\n  if (formatSpecificationArr.length > 0) {\r\n    formatSpecificationString = `\\n(${formatSpecificationArr.join(', ')})`;\r\n  }\r\n\r\n  return formatSpecificationString;\r\n}\r\n","import defaultConnectionMatcher from './default-connection-matcher';\r\nimport formatSpecification from './utils/format-specification';\r\nimport { escapeText, validFieldType, indentation } from './utils/utils';\r\n\r\nclass Table {\r\n  /**\r\n   * Table definition\r\n   * @public\r\n   * @class\r\n   * @param {Connection} connection\r\n   * @param {object} options - Table options\r\n   * @param {string} options.name - Table name\r\n   * @param {Field[]} options.fields - Array of field objects\r\n   * @param {string} options.prefix - Add prefix before the table\r\n   * @param {string} options.section - Section to add table to\r\n   * @constructor\r\n   */\r\n  constructor(connection, options) {\r\n    this.connection = defaultConnectionMatcher.findMatch(connection);\r\n\r\n    options = options || {};\r\n\r\n    if (typeof options === 'string') {\r\n      this.name = options;\r\n      options = {};\r\n    } else {\r\n      this.name = options.name;\r\n      this.fields = options.fields;\r\n      this.prefix = options.prefix;\r\n      if (options.section) {\r\n        this.section = options.section;\r\n      }\r\n    }\r\n\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * @typedef Field\r\n   * @public\r\n   * @property {string} src - Name in the data source of the field\r\n   * @property {string} name - Name after reload\r\n   * @property {string} type - Date, Time, TimeStamp\r\n   * @property {string} inputFormat - Input format to explain how a field should be parsed.\r\n   * @property {string} displayFormat - Display format that should be used after reload.\r\n   * @property {string} expr - Customize how this field should be loaded with Qlik Script.\r\n   */\r\n  /**\r\n   * Get the fields from a table\r\n   * @public\r\n   * @returns {Field[]} Array of fields\r\n   */\r\n  getFields() {\r\n    return this.fields;\r\n  }\r\n\r\n  /**\r\n   * Get the script representation of the field list. If nothing is specified than all the fields will be returned.\r\n   * @public\r\n   * @returns {string}\r\n   */\r\n  getFieldList() {\r\n    if (this.fields) {\r\n      return this.fields.map((field) => {\r\n        let formattedInput = `\"${escapeText(field.src || '')}\"`;\r\n\r\n        if (validFieldType(field.type)) {\r\n          const format = field.type.toUpperCase();\r\n\r\n          if (field.inputFormat) {\r\n            formattedInput = `${format}#(${formattedInput}, '${field.inputFormat}')`;\r\n          }\r\n\r\n          if (field.displayFormat) {\r\n            formattedInput = `${format}(${formattedInput}, '${field.displayFormat}')`;\r\n          } else {\r\n            formattedInput = `${format}(${formattedInput})`;\r\n          }\r\n        }\r\n\r\n        if (field.expr) {\r\n          formattedInput = field.expr;\r\n        }\r\n\r\n\r\n        if (!(field.name || field.src)) {\r\n          throw (new Error(`A name or src needs to specified on the field: ${JSON.stringify(field)}`));\r\n        }\r\n\r\n        return `${indentation() + formattedInput} AS \"${escapeText(field.name || field.src)}\"`;\r\n      }).join(',\\n');\r\n    }\r\n\r\n    return '*';\r\n  }\r\n\r\n  /**\r\n   * Is the table used as a proceeding load\r\n   * @public\r\n   * @returns {boolean}\r\n   */\r\n  isProceedingLoad() {\r\n    return this.connection instanceof Table;\r\n  }\r\n\r\n  /**\r\n   * Returns the specified prefix of the table if it exists.\r\n   * The prefix can be for instance be a Qlik script snippet that always should be executed before the table is loaded.\r\n   * @public\r\n   * @returns {string}\r\n   */\r\n  getPrefix() {\r\n    if (this.prefix) {\r\n      return `${this.prefix}\\n`;\r\n    }\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Get the script representation of the table\r\n   * @public\r\n   * @returns {string}\r\n   */\r\n  getScript() {\r\n    // In the future this could be moved into a connectionMatcher\r\n    // but for sake of clarity it is kept inline.\r\n    if (this.isProceedingLoad()) {\r\n      return `${this.getPrefix()}LOAD\\n${this.getFieldList()};\\n${this.connection.getScript()}`;\r\n    }\r\n\r\n    // Hack!\r\n    if (this.connection.getFileExtension) {\r\n      this.options.fileExtension = this.connection.getFileExtension();\r\n    }\r\n\r\n    return `${this.getPrefix()}LOAD\\n${this.getFieldList()}\\n${this.connection.getScript()}${formatSpecification(this.options)};`;\r\n  }\r\n\r\n  /**\r\n   * Get the name of the table\r\n   * @public\r\n   * @returns {string}\r\n   */\r\n  getName() {\r\n    return this.name || '';\r\n  }\r\n\r\n  /**\r\n   * Get the section that the table belongs to\r\n   * @public\r\n   * @returns {string}\r\n   */\r\n  getSection() {\r\n    return this.section;\r\n  }\r\n\r\n  /**\r\n   * Returns the connection or table that the table uses.\r\n   * @public\r\n   * @returns {(Connection|Table)} Connection or Table\r\n   */\r\n  getConnection() {\r\n    return this.connection;\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","/**\r\n * @constant\r\n * @type {{timestamp: string, date: string, time: string, interval: string}}\r\n */\r\nconst qTypes = {\r\n  timestamp: 'TS',\r\n  date: 'D',\r\n  time: 'T',\r\n  interval: 'IV',\r\n};\r\n\r\n/**\r\n * @constant\r\n * @type {{timestamp: string, text: string, numeric: string}}\r\n */\r\nconst qDimensionType = {\r\n  timestamp: 'T',\r\n  text: 'D',\r\n  numeric: 'N',\r\n};\r\n\r\nexport default {\r\n  qTypes,\r\n  qDimensionType,\r\n};\r\n","import hyperCubeSpecification from './hyper-cube-specification';\r\n\r\nconst DEFAULT_DELIMITER = ',';\r\n\r\n/**\r\n * If a dimension has mixed types\r\n * @private\r\n * @param {QAE.NxDimension} dimension\r\n * @returns {boolean}\r\n */\r\nfunction isDimensionTypeMixed(dimension) {\r\n  return (\r\n    dimension.qDimensionType === hyperCubeSpecification.qDimensionType.numeric\r\n    && dimension.qTags.length === 0\r\n  );\r\n}\r\n\r\n/**\r\n * Is dimension type a text\r\n * @private\r\n * @param {QAE.NxDimension} dimension\r\n * @returns {boolean}\r\n */\r\nfunction isDimensionTypeText(dimension) {\r\n  return dimension.qDimensionType === hyperCubeSpecification.qDimensionType.text;\r\n}\r\n\r\n/**\r\n * Is dimension type a timestamp\r\n * @private\r\n * @param {QAE.NxDimension} dimension\r\n * @returns {boolean}\r\n */\r\nfunction isDimensionTypeTimestamp(dimension) {\r\n  if (dimension.qDimensionType === hyperCubeSpecification.qDimensionType.timestamp) {\r\n    return true;\r\n  }\r\n  if (\r\n    dimension.qDimensionType === hyperCubeSpecification.qDimensionType.numeric\r\n    && dimension.qNumFormat.qType === hyperCubeSpecification.qTypes.timestamp\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Is dimension type a date\r\n * @private\r\n * @param {QAE.NxDimension} dimension\r\n * @returns {boolean}\r\n */\r\nfunction isDimensionTypeDate(dimension) {\r\n  if (\r\n    dimension.qDimensionType === hyperCubeSpecification.qDimensionType.numeric\r\n    && dimension.qNumFormat.qType === hyperCubeSpecification.qTypes.date\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Is dimension type a time\r\n * @private\r\n * @param {QAE.NxDimension} dimension\r\n * @returns {boolean}\r\n */\r\nfunction isDimensionTypeTime(dimension) {\r\n  if (\r\n    dimension.qDimensionType === hyperCubeSpecification.qDimensionType.numeric\r\n    && dimension.qNumFormat.qType === hyperCubeSpecification.qTypes.time\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Is dimension type an interval\r\n * @private\r\n * @param {QAE.NxDimension} dimension\r\n * @returns {boolean}\r\n */\r\nfunction isDimensionTypeInterval(dimension) {\r\n  if (\r\n    dimension.qDimensionType === hyperCubeSpecification.qDimensionType.numeric\r\n    && dimension.qNumFormat.qType === hyperCubeSpecification.qTypes.interval\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Get dimension type where the dimension matches one of the following text, mixed, timestamp, time, data, interval or num.\r\n * @private\r\n * @param {QAE.NxDimension} dimension\r\n * @returns {string}\r\n */\r\nexport function getDimensionType(dimension) {\r\n  if (isDimensionTypeText(dimension)) {\r\n    return 'text';\r\n  }\r\n  if (isDimensionTypeMixed(dimension)) {\r\n    return 'mixed';\r\n  }\r\n  if (isDimensionTypeTimestamp(dimension)) {\r\n    return 'timestamp';\r\n  }\r\n  if (isDimensionTypeTime(dimension)) {\r\n    return 'time';\r\n  }\r\n  if (isDimensionTypeDate(dimension)) {\r\n    return 'date';\r\n  }\r\n  if (isDimensionTypeInterval(dimension)) {\r\n    return 'interval';\r\n  }\r\n  return 'num';\r\n}\r\n\r\n/**\r\n * Is numeric dimension type\r\n * @private\r\n * @param {string} dimensionType\r\n * @returns {boolean}\r\n */\r\nfunction isNumericDimensionType(dimensionType) {\r\n  const numericDimensionTypes = [\r\n    'timestamp',\r\n    'interval',\r\n    'time',\r\n    'date',\r\n    'num',\r\n  ];\r\n  dimensionType = dimensionType || '';\r\n  return numericDimensionTypes.indexOf(dimensionType.toLowerCase()) > -1;\r\n}\r\n\r\n/**\r\n * Is field numeric\r\n * @private\r\n * @param {QAE.NxField} field\r\n * @returns {boolean}\r\n */\r\nfunction storeNumeric(field) {\r\n  if (field.type === 'measure') {\r\n    return true;\r\n  }\r\n  if (\r\n    field.type === 'dimension' && isNumericDimensionType(field.dimensionType)\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Check if field is a dual value\r\n * @private\r\n * @param {Field} field\r\n * @returns {boolean}\r\n */\r\nexport function checkIfFieldIsDual(field) {\r\n  return field.type === 'dimension' && field.dimensionType === 'num';\r\n}\r\n\r\n/**\r\n * Has cell a dual value\r\n * @private\r\n * @param {QAE.NxCell} cell\r\n * @param {Field} field\r\n * @returns {boolean}\r\n */\r\nexport function isCellDual(cell, field) {\r\n  return checkIfFieldIsDual(field) && cell.qText !== Number(cell.qNum).toString();\r\n}\r\n\r\n/**\r\n * Escape string containing delimiter\r\n * @private\r\n * @param {string} string\r\n * @param {string} delimiter\r\n * @returns {string}\r\n */\r\nfunction escapeStringContainingDelimiter(string, delimiter) {\r\n  if (string.indexOf(delimiter) > -1 || string.indexOf('\\n') > -1) {\r\n    return `'${string.replace(/'/g, \"''\").replace(/\\n/g, ' ')}'`;\r\n  }\r\n  return string;\r\n}\r\n\r\n/**\r\n * Get the numeric from cell value\r\n * @private\r\n * @param {QAE.NxCell} cell\r\n * @returns {number}\r\n */\r\nfunction getNumericCellValue(cell) {\r\n  return cell.qNum;\r\n}\r\n\r\n/**\r\n * Get the text from a cell value\r\n * @private\r\n * @param {QAE.NxCell} cell\r\n * @returns {string}\r\n */\r\nfunction getTextCellValue(cell) {\r\n  return escapeStringContainingDelimiter(cell.qText, DEFAULT_DELIMITER);\r\n}\r\n\r\n/**\r\n * Get the value of a cell\r\n * @private\r\n * @param {QAE.NxCell} cell\r\n * @param {Field} field\r\n * @returns {(string|number)}\r\n */\r\nexport function getCellValue(cell, field) {\r\n  if (storeNumeric(field)) {\r\n    return getNumericCellValue(cell);\r\n  }\r\n  return getTextCellValue(cell);\r\n}\r\n\r\n/**\r\n * Get dual data row\r\n * @private\r\n * @param {QAE.NxCell} cell\r\n * @returns {string}\r\n */\r\nexport function getDualDataRow(cell) {\r\n  return `${cell.qNum}${DEFAULT_DELIMITER}${escapeStringContainingDelimiter(cell.qText, DEFAULT_DELIMITER)}`;\r\n}\r\n\r\n/**\r\n * Get dual headers from a field\r\n * @private\r\n * @param {Field} field\r\n * @returns {string}\r\n */\r\nexport function getDualHeadersForField(field) {\r\n  return `${field.name}${DEFAULT_DELIMITER}${field.name}_qText}`;\r\n}\r\n","import Table from './table';\r\nimport { validFieldType } from './utils/utils';\r\nimport * as HyperCubeUtils from './utils/hyper-cube-utils';\r\n\r\nclass HyperCube {\r\n  /**\r\n   * Hypercube representation\r\n   * @public\r\n   * @class\r\n   * @param {object} hyperCubeLayout - The QIX representation of a hypercube\r\n   * @param {object} options - Hypercube options\r\n   * @param {string} name - Name\r\n   * @param {string} section - Section to add hypercube data to\r\n   * @constructor\r\n   */\r\n  constructor(hyperCubeLayout, options) {\r\n    this.items = [];\r\n    this.fields = [];\r\n    this.hyperCubeLayout = this.validateHyperCubeLayout(hyperCubeLayout);\r\n\r\n    options = options || {};\r\n\r\n    if (typeof options === 'string') {\r\n      this.name = options;\r\n      options = {};\r\n    } else {\r\n      this.name = options.name;\r\n      if (options.section) {\r\n        this.section = options.section;\r\n      }\r\n    }\r\n\r\n    this.parseHyperCubeLayout(options);\r\n\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * Validate the hypercube layout\r\n   * @private\r\n   * @param {object} hyperCubeLayout\r\n   * @returns {object} hyperCubeLayout\r\n   */\r\n  validateHyperCubeLayout(hyperCubeLayout) {\r\n    if (!hyperCubeLayout) { throw new Error('Hyper cube layout is undefined'); }\r\n    if (!hyperCubeLayout.qDimensionInfo) { throw new Error('qDimensionInfo is undefined'); }\r\n    if (!hyperCubeLayout.qMeasureInfo) { throw new Error('qMeasureInfo is undefined'); }\r\n    if (hyperCubeLayout.qMode === 'P') { throw new Error('Cannot add hyper cube in pivot mode, qMode:P(DATA_MODE_PIVOT) is not supported'); }\r\n    if (hyperCubeLayout.qMode === 'K') { throw new Error('Cannot add hyper cube in stacked mode, qMode:K(DATA_MODE_PIVOT_STACK) is not supported'); }\r\n    if (hyperCubeLayout.qMode === 'S') {\r\n      this.validateDataPages(hyperCubeLayout.qDataPages);\r\n      this.validateDataPagesCoverage(hyperCubeLayout.qDataPages, hyperCubeLayout);\r\n      return hyperCubeLayout;\r\n    }\r\n    throw new Error('HyperCubeLayout is not valid');\r\n  }\r\n\r\n  /**\r\n   * Validates the datapages of the hypercube\r\n   * @private\r\n   * @param {object} dataPages\r\n   */\r\n  validateDataPages(dataPages) {\r\n    if (!dataPages) {\r\n      throw new Error('qDataPages are undefined');\r\n    }\r\n\r\n    if (dataPages[0].qArea && dataPages[0].qArea.qTop > 0) {\r\n      throw new Error('qDataPages first page should start at qTop: 0.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates that all datapages in the hypercube is covered\r\n   * @private\r\n   * @param {object[]} dataPages\r\n   * @param {object} hyperCubeLayout\r\n   */\r\n  validateDataPagesCoverage(dataPages, hyperCubeLayout) {\r\n    let qHeight = 0;\r\n\r\n    dataPages.forEach((dataPage) => {\r\n      this.validateQMatrix(dataPage);\r\n      this.validateQArea(dataPage, hyperCubeLayout, qHeight);\r\n      qHeight += dataPage.qArea.qHeight;\r\n    }, this);\r\n\r\n    if (hyperCubeLayout.qSize.qcy !== qHeight) {\r\n      throw new Error('qDataPages are missing pages.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates the QMatrix in the datapage\r\n   * @private\r\n   * @param {object} dataPage\r\n   */\r\n  validateQMatrix(dataPage) {\r\n    if (!dataPage.qMatrix) {\r\n      throw new Error('qMatrix of qDataPages are undefined');\r\n    }\r\n    if (dataPage.qMatrix.length === 0) {\r\n      throw new Error('qDataPages are empty');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates the QArea in the datapage\r\n   * @private\r\n   * @param {object} dataPage\r\n   * @param {object} hyperCubeLayout\r\n   * @param {number} qHeight\r\n   */\r\n  validateQArea(dataPage, hyperCubeLayout, qHeight) {\r\n    if (!dataPage.qArea) {\r\n      throw new Error('qArea of qDataPages are undefined');\r\n    }\r\n    if (dataPage.qArea.qLeft > 0) {\r\n      throw new Error('qDataPages have data pages that\\'s not of full qWidth.');\r\n    }\r\n    if (dataPage.qArea.qWidth < hyperCubeLayout.qSize.qcx) {\r\n      throw new Error('qDataPages have data pages that\\'s not of full qWidth.');\r\n    }\r\n    if (dataPage.qArea.qTop < qHeight) {\r\n      throw new Error('qDataPages have overlapping data pages.');\r\n    }\r\n    if (dataPage.qArea.qTop > qHeight) {\r\n      throw new Error('qDataPages are missing pages.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses the hypercube an extracts the data\r\n   * @private\r\n   */\r\n  parseHyperCubeLayout() {\r\n    const that = this;\r\n    that.fields = that.getFieldsFromHyperCubeLayout();\r\n    that.data = that.getDataFromHyperCubeLayout();\r\n    const inlineData = `${that.fields\r\n      .map(field => field.name)\r\n      .join(',')}\\n${this.data}`;\r\n    let hasDual = false;\r\n    that.fields.forEach((field) => {\r\n      if (field.isDual) {\r\n        hasDual = true;\r\n        that.items.push(that.getMapTableForDualField(field));\r\n      }\r\n    });\r\n    const options = {\r\n      name: that.name,\r\n      fields: that.getFieldsDefinition(that.fields),\r\n    };\r\n    if (that.section && !hasDual) {\r\n      options.section = that.section;\r\n    }\r\n    that.items.push(new Table(inlineData, options));\r\n  }\r\n\r\n  /**\r\n   * Get the Fields definition\r\n   * @private\r\n   * @param {object[]} fields\r\n   * @returns {object[]} fields\r\n   */\r\n  getFieldsDefinition(fields) {\r\n    return fields.map((field) => {\r\n      const mappedField = { name: field.name };\r\n      if (validFieldType(field.dimensionType)) {\r\n        mappedField.type = field.dimensionType;\r\n        mappedField.displayFormat = field.displayFormat;\r\n      }\r\n      if (field.isDual) {\r\n        mappedField.expr = `Dual(ApplyMap('MapDual__${field.name}', \"${field.name}\"), \"${field.name}\")`;\r\n      } else {\r\n        mappedField.src = field.name;\r\n      }\r\n      return mappedField;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return qmatrix with dual fields\r\n   * @private\r\n   * @param {object} qMatrix\r\n   * @param {object} field\r\n   * @returns {object} field\r\n   */\r\n  mapDualFieldQMatrix(qMatrix, field) {\r\n    function uniqueFilter(value, index, self) {\r\n      return self.indexOf(value) === index;\r\n    }\r\n    return qMatrix\r\n      .map(row => HyperCubeUtils.getDualDataRow(row[field.index]))\r\n      .filter(uniqueFilter);\r\n  }\r\n\r\n  /**\r\n   * Get table with dual fields\r\n   * @private\r\n   * @param {object} field\r\n   * @returns {object} Table\r\n   */\r\n  getMapTableForDualField(field) {\r\n    const that = this;\r\n    const concatQMatrix = that.hyperCubeLayout.qDataPages.reduce(\r\n      (prev, curr) => [...prev, ...curr.qMatrix],\r\n      [],\r\n    );\r\n    const data = that.mapDualFieldQMatrix(concatQMatrix, field);\r\n    const headers = HyperCubeUtils.getDualHeadersForField(field);\r\n    const inlineData = `${headers}\\n${data.join('\\n')}`;\r\n    const name = `MapDual__${field.name}`;\r\n    const options = { name, prefix: 'Mapping' };\r\n    if (this.section && this.items.length === 0) {\r\n      options.section = this.section;\r\n    }\r\n    return new Table(inlineData, options);\r\n  }\r\n\r\n  /**\r\n   * Extracts the data from the hypercube layout as a csv representation\r\n   * @private\r\n   * @returns {string}\r\n   */\r\n  getDataFromHyperCubeLayout() {\r\n    const that = this;\r\n    const data = that.hyperCubeLayout.qDataPages\r\n      .map(dataPage => dataPage.qMatrix\r\n        .map(row => row\r\n          .map((cell, index) => {\r\n            const field = that.fields[index];\r\n            if (!field.isDual && HyperCubeUtils.isCellDual(cell, field)) {\r\n              field.isDual = true;\r\n            }\r\n            return HyperCubeUtils.getCellValue(cell, field);\r\n          })\r\n          .join(','))\r\n        .join('\\n'))\r\n      .join('\\n');\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Get the fields from the hypercube\r\n   * @private\r\n   * @returns {{type: string, dimensionType: string, name: string, displayFormat: string, index: number }[]} - An array of dimension and measures\r\n   */\r\n  getFieldsFromHyperCubeLayout() {\r\n    const that = this;\r\n    const fields = [];\r\n    for (let i = 0; i < that.hyperCubeLayout.qDimensionInfo.length; i += 1) {\r\n      fields.push({\r\n        type: 'dimension',\r\n        dimensionType: HyperCubeUtils.getDimensionType(that.hyperCubeLayout.qDimensionInfo[i]),\r\n        name: that.hyperCubeLayout.qDimensionInfo[i].qFallbackTitle,\r\n        displayFormat: that.hyperCubeLayout.qDimensionInfo[i].qNumFormat.qFmt,\r\n        index: i,\r\n      });\r\n    }\r\n    for (let j = 0; j < that.hyperCubeLayout.qMeasureInfo.length; j += 1) {\r\n      fields.push({\r\n        type: 'measure',\r\n        name: that.hyperCubeLayout.qMeasureInfo[j].qFallbackTitle,\r\n        index: that.hyperCubeLayout.qDimensionInfo.length + j,\r\n      });\r\n    }\r\n    return fields;\r\n  }\r\n\r\n  /**\r\n   * Get tables from the hypercube\r\n   * @public\r\n   * @returns {object[]} Tables\r\n   */\r\n  getItems() {\r\n    return this.items;\r\n  }\r\n}\r\n\r\nexport default HyperCube;\r\n","class SetStatement {\r\n  /**\r\n   * Define set statements\r\n   * @class\r\n   * @public\r\n   * @param {object} defaultSetStatements - A representation where each property name will be used as key and the property will be the value\r\n   * @constructor\r\n   */\r\n  constructor(defaultSetStatements) {\r\n    this.defaultSetStatements = defaultSetStatements;\r\n  }\r\n\r\n  /**\r\n   * Get the entire set statement as script\r\n   * @public\r\n   * @returns {string}\r\n   */\r\n  getScript() {\r\n    return Object.keys(this.defaultSetStatements)\r\n      .map(key => `SET ${key}='${Array.isArray(this.defaultSetStatements[key])\r\n        ? this.defaultSetStatements[key].join(';') : this.defaultSetStatements[key]}';`)\r\n      .join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Always returns the name as empty\r\n   * @public\r\n   * @returns {string}\r\n   */\r\n  getName() {\r\n    return '';\r\n  }\r\n}\r\n\r\nexport default SetStatement;\r\n","import { getFieldName, escapeText } from './utils/utils';\r\n\r\nclass DerivedFieldsTemplate {\r\n  /**\r\n   * Declare fields that can be derived from a template. An example can be a calendar template.\r\n   * @public\r\n   * @param {object} options - Derived Field Template definition.\r\n   * @param {callback} options.fieldMatchFunction - Matching function that will apply a field template definition.\r\n   * @param {string} options.name - Name of derived field.\r\n   * @param {string} options.fieldTag - What field tag that will be used in the derived field.\r\n   * @param {string} options.derivedFieldDefinition - What script definition should be used in the derived field.\r\n   * @constructor\r\n   */\r\n  constructor(options) {\r\n    this.getFieldFn = options.fieldMatchFunction;\r\n    this.name = options.name;\r\n    this.fieldTag = options.fieldTag;\r\n    this.derivedFieldDefinition = options.derivedFieldDefinition;\r\n  }\r\n\r\n  /**\r\n   * Returns the script\r\n   * @public\r\n   * @returns {string}\r\n   */\r\n  getScript() {\r\n    const fields = this.getFieldFn() || [];\r\n\r\n    if (fields.length > 0) {\r\n      return this.getDefinition(fields.map(getFieldName));\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Get the script definition for a set of specific fields\r\n   * @public\r\n   * @param {string[]} fieldNames - An array of strings with field names.\r\n   * @returns {string}\r\n   */\r\n  getDefinition(fieldNames) {\r\n    return `\"${escapeText(this.name)}\":\r\nDECLARE FIELD DEFINITION Tagged ('$${this.fieldTag}')\r\nFIELDS\r\n${this.derivedFieldDefinition}\r\nDERIVE FIELDS FROM FIELDS [${fieldNames.join(', ')}] USING \"${escapeText(this.name)}\";`;\r\n  }\r\n}\r\n\r\nexport default DerivedFieldsTemplate;\r\n","import DerivedFieldTemplate from './derived-fields-template';\r\n\r\nconst derivedFieldsDefinition = `Dual(Year($1), YearStart($1)) AS [Year] Tagged ('$axis', '$year'),\r\n  Dual('Q'&Num(Ceil(Num(Month($1))/3)),Num(Ceil(NUM(Month($1))/3),00)) AS [Quarter] Tagged ('$quarter', '$cyclic'),\r\n  Dual(Year($1)&'-Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [YearQuarter] Tagged ('$yearquarter', '$qualified'),\r\n  Dual('Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [_YearQuarter] Tagged ('$yearquarter', '$hidden', '$simplified'),\r\n  Month($1) AS [Month] Tagged ('$month', '$cyclic'),\r\n  Dual(Year($1)&'-'&Month($1), monthstart($1)) AS [YearMonth] Tagged ('$axis', '$yearmonth', '$qualified'),\r\n  Dual(Month($1), monthstart($1)) AS [_YearMonth] Tagged ('$axis', '$yearmonth', '$simplified', '$hidden'),\r\n  Dual('W'&Num(Week($1),00), Num(Week($1),00)) AS [Week] Tagged ('$weeknumber', '$cyclic'),\r\n  Date(Floor($1)) AS [Date] Tagged ('$axis', '$date', '$qualified'),\r\n  Date(Floor($1), 'D') AS [_Date] Tagged ('$axis', '$date', '$hidden', '$simplified'),\r\n  If (DayNumberOfYear($1) <= DayNumberOfYear(Today()), 1, 0) AS [InYTD] ,\r\nYear(Today())-Year($1) AS [YearsAgo] ,\r\n  If (DayNumberOfQuarter($1) <= DayNumberOfQuarter(Today()),1,0) AS [InQTD] ,\r\n4*Year(Today())+Ceil(Month(Today())/3)-4*Year($1)-Ceil(Month($1)/3) AS [QuartersAgo] ,\r\nCeil(Month(Today())/3)-Ceil(Month($1)/3) AS [QuarterRelNo] ,\r\n  If(Day($1)<=Day(Today()),1,0) AS [InMTD] ,\r\n12*Year(Today())+Month(Today())-12*Year($1)-Month($1) AS [MonthsAgo] ,\r\nMonth(Today())-Month($1) AS [MonthRelNo] ,\r\n  If(WeekDay($1)<=WeekDay(Today()),1,0) AS [InWTD] ,\r\n(WeekStart(Today())-WeekStart($1))/7 AS [WeeksAgo] ,\r\nWeek(Today())-Week($1) AS [WeekRelNo];`;\r\n\r\n/**\r\n * A field matching callback to identify which fields that are associated with a specific calendarTemplate.\r\n * @callback fieldMatchingCalendarCallback\r\n * @param {string} calendarTemplate\r\n * @param {Field}\r\n */\r\n\r\n/**\r\n * Get the derived field definition for a field that matches the pattern\r\n * @public\r\n * @param {fieldMatchingCalendarCallback} fn - Field matcher function\r\n * @returns {DerivedFieldsTemplate}\r\n */\r\nfunction getCalenderDerivedFieldDefinition(fn) {\r\n  return new DerivedFieldTemplate({\r\n    name: 'autoCalendar',\r\n    fieldTag: 'date',\r\n    derivedFieldDefinition: derivedFieldsDefinition,\r\n    fieldMatchFunction: () => fn(f => f.calendarTemplate),\r\n  });\r\n}\r\n\r\nexport default getCalenderDerivedFieldDefinition;\r\n","import Table from './table';\r\nimport HyperCube from './hyper-cube';\r\nimport Connections from './connections';\r\nimport SetStatement from './set-statement';\r\n\r\nimport * as Utils from './utils/utils';\r\nimport getDerivedFieldDefinition from './calendar-derived-fields';\r\n\r\nconst SCRIPT_BLOCK_SPACING = '\\n\\n';\r\n\r\nclass Halyard {\r\n  /**\r\n   * Representation of tables or hypercubes to load\r\n   * @class\r\n   * @public\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    this.defaultSetStatements = {};\r\n    this.items = [];\r\n    this.addItem(new SetStatement(this.defaultSetStatements));\r\n    this.lastItems = [getDerivedFieldDefinition(x => this.getFields(x))];\r\n  }\r\n\r\n  /**\r\n   * Get connections object that are used in the model\r\n   * @public\r\n   * @returns {Connection[]}\r\n   */\r\n  getConnections() {\r\n    return this.items.filter(item => item.getConnection).map(item => item.getConnection());\r\n  }\r\n\r\n  /**\r\n   * Get the QIX connections definitions that are used in the model\r\n   * @public\r\n   * @returns {{qName: (string), qConnectionString: (string), qType: (string)}\r\n   */\r\n  getQixConnections() {\r\n    return this.getConnections().map(connection => connection.getQixConnectionObject())\r\n      .filter(connection => connection);\r\n  }\r\n\r\n  /**\r\n   * Field matching callback to identify if a field matches another\r\n   * @callback fieldMatchingCallback\r\n   * @param {Field} field\r\n   * @param {boolean}\r\n   */\r\n\r\n  /**\r\n   * Get fields that matches pattern sent in as params\r\n   * @public\r\n   * @param {fieldMatchingCallback} matcherFn\r\n   * @returns {Field[]}\r\n   */\r\n  getFields(matcherFn) {\r\n    matcherFn = matcherFn || (() => true);\r\n\r\n    const fields = [];\r\n\r\n    this.items.forEach((item) => {\r\n      if (item.getFields && item.getFields()) {\r\n        fields.push(...item.getFields().filter(matcherFn));\r\n      }\r\n    });\r\n\r\n    return fields;\r\n  }\r\n\r\n  /**\r\n   * Configure the default set statements like time, date, currency formats\r\n   * @public\r\n   * @param {SetStatement} defaultSetStatements\r\n   * @param {boolean} preservePreviouslyEnteredValues\r\n   */\r\n  setDefaultSetStatements(defaultSetStatements, preservePreviouslyEnteredValues) {\r\n    const that = this;\r\n\r\n    Object.keys(defaultSetStatements).forEach((key) => {\r\n      if (!(preservePreviouslyEnteredValues && that.defaultSetStatements[key])) {\r\n        that.defaultSetStatements[key] = defaultSetStatements[key];\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the script for a item (table, preceeding load)\r\n   * @public\r\n   * @param {(Table|HyperCube)} item\r\n   * @returns {string}\r\n   */\r\n  getItemScript(item) {\r\n    let itemScript = item.getScript();\r\n\r\n    if (item.getName && item.getName()) {\r\n      if (item.section) {\r\n        itemScript = `///$tab ${Utils.escapeText(item.section)}\\n\"${Utils.escapeText(item.getName())}\":\\n${itemScript}`;\r\n      } else {\r\n        itemScript = `\"${Utils.escapeText(item.getName())}\":\\n${itemScript}`;\r\n      }\r\n    }\r\n\r\n    return itemScript;\r\n  }\r\n\r\n  /**\r\n   * Fetch all script blocks\r\n   * @public\r\n   * @returns {string[]}\r\n   */\r\n  getAllScriptBlocks() {\r\n    return this.items.concat(this.lastItems).filter(item => item.getScript());\r\n  }\r\n\r\n  /**\r\n   * Fetches the entire script\r\n   * @public\r\n   * @returns {string}\r\n   */\r\n  getScript() {\r\n    return this.getAllScriptBlocks().map(item => this.getItemScript(item))\r\n      .join(SCRIPT_BLOCK_SPACING);\r\n  }\r\n\r\n  /**\r\n   * Add hyper cube explicit or implicitly\r\n   * @public\r\n   * @param {Hypercube} arg1 - Hypercube\r\n   * @param {object} options - Hypercube options\r\n   * @param {string} options.name - Name\r\n   * @param {string} options.section - Section to add hypercube data to\r\n   * @returns {Hypercube} Hypercube\r\n   */\r\n  addHyperCube(arg1, options) {\r\n    let newHyperCube;\r\n\r\n    if (arg1 instanceof HyperCube) {\r\n      newHyperCube = arg1;\r\n    } else {\r\n      newHyperCube = new HyperCube(arg1, options);\r\n    }\r\n\r\n    for (let i = 0; i < newHyperCube.items.length; i += 1) {\r\n      this.checkIfItemNameExists(newHyperCube.items[i]);\r\n    }\r\n\r\n    for (let i = 0; i < newHyperCube.items.length; i += 1) {\r\n      this.addItem(newHyperCube.items[i]);\r\n    }\r\n\r\n    return newHyperCube;\r\n  }\r\n\r\n  /**\r\n   * Support to add table explicit or implicitly\r\n   * @public\r\n   * @param {Table} arg1 - Table\r\n   * @param {object} options\r\n   * @param {string} options.name - Table name\r\n   * @param {Field[]} options.fields - Array of field objects\r\n   * @param {string} options.prefix - Add prefix before the table\r\n   * @param {string} options.section - Section to add table to\r\n   * @returns {object} Table\r\n   */\r\n  addTable(arg1, options) {\r\n    let newTable;\r\n\r\n    if (arg1 instanceof Table) {\r\n      newTable = arg1;\r\n    } else {\r\n      newTable = new Table(arg1, options);\r\n    }\r\n\r\n    return this.addItem(newTable);\r\n  }\r\n\r\n  /**\r\n   * Verify that item doesn't exist in model\r\n   * @public\r\n   * @param {(Table|Hypercube)} newItem - Table or Hypercube\r\n   */\r\n  checkIfItemNameExists(newItem) {\r\n    if (newItem.getName && newItem.getName()) {\r\n      if (this.items.filter(item => item.getName() === newItem.getName()).length > 0) {\r\n        throw new Error('Cannot add another table with the same name.');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add new item to the model\r\n   * @public\r\n   * @param {(Table|Hypercube)} newItem - Table or Hypercube\r\n   * @returns {(Table|Hypercube)} - Table or Hypercube\r\n   */\r\n  addItem(newItem) {\r\n    this.checkIfItemNameExists(newItem);\r\n\r\n    this.items.push(newItem);\r\n\r\n    return newItem;\r\n  }\r\n\r\n  /**\r\n   * Locate which item that generated a script at the specified character position\r\n   * @public\r\n   * @param {number} charPosition\r\n   * @returns {(Table|Hypercube)} - Table or Hypercube\r\n   */\r\n  getItemThatGeneratedScriptAt(charPosition) {\r\n    const allScriptBlocks = this.getAllScriptBlocks();\r\n    let scriptBlockStartPosition = 0;\r\n\r\n    for (let i = 0; i < allScriptBlocks.length; i += 1) {\r\n      const itemScript = this.getItemScript(allScriptBlocks[i]);\r\n      const scriptBlockEndPosition = scriptBlockStartPosition\r\n          + (`${itemScript}${SCRIPT_BLOCK_SPACING}`).length;\r\n\r\n      if (scriptBlockStartPosition <= charPosition && charPosition <= scriptBlockEndPosition) {\r\n        return allScriptBlocks[i];\r\n      }\r\n\r\n      scriptBlockStartPosition = scriptBlockEndPosition;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n}\r\n\r\nHalyard.Table = Table;\r\n\r\nHalyard.HyperCube = HyperCube;\r\n\r\nHalyard.Connections = Connections;\r\n\r\nexport default Halyard;\r\n\r\nif (typeof module !== 'undefined') {\r\n  module.exports = Halyard;\r\n}\r\n"],"names":["escapeText","text","replace","validFieldType","type","indexOf","toLowerCase","getFieldName","field","name","src","ConnectionBase","[object Object]","path","connectionType","this","fileExtension","qName","getName","qConnectionString","qType","getConnectionType","c","r","Math","random","toString","getLibStatement","File","super","folderPathMatch","match","Utils.folderPath","fileName","fileNameMatch","Utils.fileName","fileExtensionMatch","Utils.fileExtension","Web","url","Inline","data","Utils.escapeText","escapeValueContainingDelimiter","delimiter","connectionMatcher","connectionsRegistry","matchingFn","connection","push","i","length","supportedCharacterSet","characterSet","Number","addConnection","Connections","Array","csv","headers","Object","keys","map","header","join","fields","j","slice","JsonToCsv.convert","Table","options","defaultConnectionMatcher","findMatch","prefix","section","formattedInput","format","toUpperCase","inputFormat","displayFormat","expr","Error","JSON","stringify","isProceedingLoad","getPrefix","getFieldList","getScript","getFileExtension","formatSpecificationArr","fileFormat","headerRowNr","srcTable","noLabels","formatSpecificationString","formatSpecification","qTypes","timestamp","date","time","interval","qDimensionType","numeric","DEFAULT_DELIMITER","getDimensionType","dimension","hyperCubeSpecification","isDimensionTypeText","qTags","isDimensionTypeMixed","qNumFormat","isDimensionTypeTimestamp","isDimensionTypeTime","isDimensionTypeDate","isDimensionTypeInterval","escapeStringContainingDelimiter","string","getCellValue","cell","dimensionType","storeNumeric","qNum","getNumericCellValue","qText","getTextCellValue","HyperCube","hyperCubeLayout","items","validateHyperCubeLayout","parseHyperCubeLayout","qDimensionInfo","qMeasureInfo","qMode","validateDataPages","qDataPages","validateDataPagesCoverage","dataPages","qArea","qTop","qHeight","forEach","dataPage","validateQMatrix","validateQArea","qSize","qcy","qMatrix","qLeft","qWidth","qcx","that","getFieldsFromHyperCubeLayout","getDataFromHyperCubeLayout","inlineData","hasDual","isDual","getMapTableForDualField","getFieldsDefinition","mappedField","row","index","filter","value","self","concatQMatrix","reduce","prev","curr","mapDualFieldQMatrix","HyperCubeUtils.getDualHeadersForField","checkIfFieldIsDual","HyperCubeUtils.getCellValue","HyperCubeUtils.getDimensionType","qFallbackTitle","qFmt","SetStatement","defaultSetStatements","key","isArray","DerivedFieldsTemplate","getFieldFn","fieldMatchFunction","fieldTag","derivedFieldDefinition","getDefinition","fieldNames","derivedFieldsDefinition","SCRIPT_BLOCK_SPACING","Halyard","fn","addItem","lastItems","x","getFields","DerivedFieldTemplate","f","calendarTemplate","item","getConnection","getConnections","getQixConnectionObject","matcherFn","preservePreviouslyEnteredValues","itemScript","concat","getAllScriptBlocks","getItemScript","arg1","newHyperCube","checkIfItemNameExists","newTable","newItem","charPosition","allScriptBlocks","scriptBlockStartPosition","scriptBlockEndPosition","module","exports"],"mappings":"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"}